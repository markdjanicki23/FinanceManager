@using FinanceManager.Shared;
@inject HttpClient Http;

<div class="card">
    <div class="card-header">
        Add an earning
    </div>
    <div class="card-body">
        <EditForm Model="@earning" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="dateInput">Date</label>
                <InputDate class="form-control" id="dateInput" @bind-Value="earning.Date" />
            </div>
            <div class="form-group">
                <label for="subjectInput">Subject</label>
                <InputText class="form-control" id="subjectInput" @bind-Value="earning.Subject" />
            </div>
            <div class="form-group">
                <label for="categoryInput">Category</label>
                <InputSelect class="form-control" id="categoryInput" @bind-Value="earning.Category">
                    @{ foreach (var value in Enum.GetValues(typeof(EarningCategory)))
                                            {
                        <option value="@value">@value</option> } }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="amountInput">Amount</label>
                <InputNumber class="form-control" id="amountInput" @bind-Value="earning.Amount" />
            </div>
            <div>
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </EditForm>
    </div>
</div>

@code { private EarningModel earning = new EarningModel { Date = DateTime.Today };

            [Parameter]
            public EventCallback OnSubmitCallback { get; set; }

            public async Task HandleValidSubmit()
            {
                await Http.PostAsJsonAsync<EarningModel>("api/Earnings", earning);
                await OnSubmitCallback.InvokeAsync();
            } }


@* We create a form to make an instance of the EarningModel. We set the date it was created to the current day, and use the form to fill
    the fields. Note the "InputText", "InputDate", etc. Also, note "bind-value", where we bind what was created to what is defined in
    the model. Pretty neat. *@